//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-05 - 14:09:27
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using ProjectManagement.Domain;
using ProjectManagement.DLL.ORM;

namespace ProjectManagement.DLL
{

    /// <summary>
    /// Assembler for <see cref="GroupByItem"/> and <see cref="GroupByItemDTO"/>.
    /// </summary>
    public static partial class GroupByItemAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="GroupByItemDTO"/> converted from <see cref="GroupByItem"/>.</param>
        static partial void OnDTO(this GroupByItem entity, GroupByItemDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="GroupByItem"/> converted from <see cref="GroupByItemDTO"/>.</param>
        static partial void OnEntity(this GroupByItemDTO dto, GroupByItem entity);

        /// <summary>
        /// Converts this instance of <see cref="GroupByItemDTO"/> to an instance of <see cref="GroupByItem"/>.
        /// </summary>
        /// <param name="dto"><see cref="GroupByItemDTO"/> to convert.</param>
        public static GroupByItem ToEntity(this GroupByItemDTO dto)
        {
            if (dto == null) return null;

            var entity = new GroupByItem();

            entity.GrpIdItem = dto.GrpIdItem;
            entity.GroupItemName = dto.GroupItemName;
            entity.GuIdGroup = dto.GuIdGroup;
            entity.ChildOF = dto.ChildOF;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="GroupByItem"/> to an instance of <see cref="GroupByItemDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="GroupByItem"/> to convert.</param>
        public static GroupByItemDTO ToDTO(this GroupByItem entity)
        {
            if (entity == null) return null;

            var dto = new GroupByItemDTO();

            dto.GrpIdItem = entity.GrpIdItem;
            dto.GroupItemName = entity.GroupItemName;
            dto.GuIdGroup = entity.GuIdGroup;
            dto.ChildOF = entity.ChildOF;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="GroupByItemDTO"/> to an instance of <see cref="GroupByItem"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<GroupByItem> ToEntities(this IEnumerable<GroupByItemDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="GroupByItem"/> to an instance of <see cref="GroupByItemDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<GroupByItemDTO> ToDTOs(this IEnumerable<GroupByItem> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
