//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-05 - 14:09:27
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using ProjectManagement.Domain;
using ProjectManagement.DLL.ORM;

namespace ProjectManagement.DLL
{

    /// <summary>
    /// Assembler for <see cref="AccountGroup"/> and <see cref="AccountGroupDTO"/>.
    /// </summary>
    public static partial class AccountGroupAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AccountGroupDTO"/> converted from <see cref="AccountGroup"/>.</param>
        static partial void OnDTO(this AccountGroup entity, AccountGroupDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="AccountGroup"/> converted from <see cref="AccountGroupDTO"/>.</param>
        static partial void OnEntity(this AccountGroupDTO dto, AccountGroup entity);

        /// <summary>
        /// Converts this instance of <see cref="AccountGroupDTO"/> to an instance of <see cref="AccountGroup"/>.
        /// </summary>
        /// <param name="dto"><see cref="AccountGroupDTO"/> to convert.</param>
        public static AccountGroup ToEntity(this AccountGroupDTO dto)
        {
            if (dto == null) return null;

            var entity = new AccountGroup();

            entity.AcId = dto.AcId;
            entity.AcGroup = dto.AcGroup;
            entity.CloBalance = dto.CloBalance;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="AccountGroup"/> to an instance of <see cref="AccountGroupDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="AccountGroup"/> to convert.</param>
        public static AccountGroupDTO ToDTO(this AccountGroup entity)
        {
            if (entity == null) return null;

            var dto = new AccountGroupDTO();

            dto.AcId = entity.AcId;
            dto.AcGroup = entity.AcGroup;
            dto.CloBalance = entity.CloBalance;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AccountGroupDTO"/> to an instance of <see cref="AccountGroup"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<AccountGroup> ToEntities(this IEnumerable<AccountGroupDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="AccountGroup"/> to an instance of <see cref="AccountGroupDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AccountGroupDTO> ToDTOs(this IEnumerable<AccountGroup> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
