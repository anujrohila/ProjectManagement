//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-12 - 20:08:21
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using ProjectManagement.Domain;

namespace ProjectManagement.DLL.ORM
{

    /// <summary>
    /// Assembler for <see cref="tblProject"/> and <see cref="tblProjectDTO"/>.
    /// </summary>
    public static partial class tblProjectAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="tblProjectDTO"/> converted from <see cref="tblProject"/>.</param>
        static partial void OnDTO(this tblProject entity, tblProjectDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="tblProject"/> converted from <see cref="tblProjectDTO"/>.</param>
        static partial void OnEntity(this tblProjectDTO dto, tblProject entity);

        /// <summary>
        /// Converts this instance of <see cref="tblProjectDTO"/> to an instance of <see cref="tblProject"/>.
        /// </summary>
        /// <param name="dto"><see cref="tblProjectDTO"/> to convert.</param>
        public static tblProject ToEntity(this tblProjectDTO dto)
        {
            if (dto == null) return null;

            var entity = new tblProject();

            entity.ProjectId = dto.ProjectId;
            entity.Title = dto.Title;
            entity.Address = dto.Address;
            entity.Description = dto.Description;
            entity.StratDateTime = dto.StratDateTime;
            entity.Catalog = dto.Catalog;
            entity.UserName = dto.UserName;
            entity.Password = dto.Password;
            entity.IsActive = dto.IsActive;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="tblProject"/> to an instance of <see cref="tblProjectDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="tblProject"/> to convert.</param>
        public static tblProjectDTO ToDTO(this tblProject entity)
        {
            if (entity == null) return null;

            var dto = new tblProjectDTO();

            dto.ProjectId = entity.ProjectId;
            dto.Title = entity.Title;
            dto.Address = entity.Address;
            dto.Description = entity.Description;
            dto.StratDateTime = entity.StratDateTime;
            dto.Catalog = entity.Catalog;
            dto.UserName = entity.UserName;
            dto.Password = entity.Password;
            dto.IsActive = entity.IsActive;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="tblProjectDTO"/> to an instance of <see cref="tblProject"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<tblProject> ToEntities(this IEnumerable<tblProjectDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="tblProject"/> to an instance of <see cref="tblProjectDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<tblProjectDTO> ToDTOs(this IEnumerable<tblProject> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
