//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-05 - 14:09:28
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using ProjectManagement.Domain;
using ProjectManagement.DLL.ORM;

namespace ProjectManagement.DLL
{

    /// <summary>
    /// Assembler for <see cref="GroupBySupplier"/> and <see cref="GroupBySupplierDTO"/>.
    /// </summary>
    public static partial class GroupBySupplierAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="GroupBySupplierDTO"/> converted from <see cref="GroupBySupplier"/>.</param>
        static partial void OnDTO(this GroupBySupplier entity, GroupBySupplierDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="GroupBySupplier"/> converted from <see cref="GroupBySupplierDTO"/>.</param>
        static partial void OnEntity(this GroupBySupplierDTO dto, GroupBySupplier entity);

        /// <summary>
        /// Converts this instance of <see cref="GroupBySupplierDTO"/> to an instance of <see cref="GroupBySupplier"/>.
        /// </summary>
        /// <param name="dto"><see cref="GroupBySupplierDTO"/> to convert.</param>
        public static GroupBySupplier ToEntity(this GroupBySupplierDTO dto)
        {
            if (dto == null) return null;

            var entity = new GroupBySupplier();

            entity.GrpIdSupplier = dto.GrpIdSupplier;
            entity.GroupSupplierName = dto.GroupSupplierName;
            entity.childOf = dto.childOf;
            entity.Display = dto.Display;
            entity.ClosingBalance = dto.ClosingBalance;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="GroupBySupplier"/> to an instance of <see cref="GroupBySupplierDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="GroupBySupplier"/> to convert.</param>
        public static GroupBySupplierDTO ToDTO(this GroupBySupplier entity)
        {
            if (entity == null) return null;

            var dto = new GroupBySupplierDTO();

            dto.GrpIdSupplier = entity.GrpIdSupplier;
            dto.GroupSupplierName = entity.GroupSupplierName;
            dto.childOf = entity.childOf;
            dto.Display = entity.Display;
            dto.ClosingBalance = entity.ClosingBalance;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="GroupBySupplierDTO"/> to an instance of <see cref="GroupBySupplier"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<GroupBySupplier> ToEntities(this IEnumerable<GroupBySupplierDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="GroupBySupplier"/> to an instance of <see cref="GroupBySupplierDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<GroupBySupplierDTO> ToDTOs(this IEnumerable<GroupBySupplier> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
