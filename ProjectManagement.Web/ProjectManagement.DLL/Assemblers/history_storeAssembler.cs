//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015-03-05 - 14:09:28
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using ProjectManagement.Domain;
using ProjectManagement.DLL.ORM;

namespace ProjectManagement.DLL.ORM
{

    /// <summary>
    /// Assembler for <see cref="history_store"/> and <see cref="history_storeDTO"/>.
    /// </summary>
    public static partial class history_storeAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="history_storeDTO"/> converted from <see cref="history_store"/>.</param>
        static partial void OnDTO(this history_store entity, history_storeDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="history_store"/> converted from <see cref="history_storeDTO"/>.</param>
        static partial void OnEntity(this history_storeDTO dto, history_store entity);

        /// <summary>
        /// Converts this instance of <see cref="history_storeDTO"/> to an instance of <see cref="history_store"/>.
        /// </summary>
        /// <param name="dto"><see cref="history_storeDTO"/> to convert.</param>
        public static history_store ToEntity(this history_storeDTO dto)
        {
            if (dto == null) return null;

            var entity = new history_store();

            entity.timemark = dto.timemark;
            entity.table_name = dto.table_name;
            entity.pk_date_src = dto.pk_date_src;
            entity.pk_date_dest = dto.pk_date_dest;
            entity.record_state = dto.record_state;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="history_store"/> to an instance of <see cref="history_storeDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="history_store"/> to convert.</param>
        public static history_storeDTO ToDTO(this history_store entity)
        {
            if (entity == null) return null;

            var dto = new history_storeDTO();

            dto.timemark = entity.timemark;
            dto.table_name = entity.table_name;
            dto.pk_date_src = entity.pk_date_src;
            dto.pk_date_dest = entity.pk_date_dest;
            dto.record_state = entity.record_state;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="history_storeDTO"/> to an instance of <see cref="history_store"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<history_store> ToEntities(this IEnumerable<history_storeDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="history_store"/> to an instance of <see cref="history_storeDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<history_storeDTO> ToDTOs(this IEnumerable<history_store> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
